name: build

on:
  pull_request:
  push:
  schedule:
    # at 08:00 on Sunday
    - cron: "0 8 * * 0"

env:
  PG_BUILD_PARALLELISM: 2

  # no underscores because this is a "magic" Postgres variable natively
  # understood by many Postgres utilities
  PGPORT: 5433

jobs:
  build:
    runs-on: ${{ matrix.os }}
    timeout-minutes: 10

    strategy:
      matrix:
        # `-fuse-ld=gold` (Gold linker) is Linux only
        #
        # x86_64-pc-linux-gnu
        # x86_64-apple-darwin19.6.0
        include:
          - os: macos-latest
            CC: clang
            # CONFIGURE_HOST: arm-linux-gnu

          - os: ubuntu-latest
            CC: clang
            CFLAGS: "-fuse-ld=gold"
            # CONFIGURE_HOST: x86_64-pc-linux-gnu

          - os: windows-latest
            BISON: win_bison
            # CONFIGURE_HOST: arm-linux-gnu

    defaults:
      run:
        shell: bash # for Windows

    steps:
      - uses: actions/checkout@v2
        with:
          repository: postgres/postgres

      - run: /usr/bin/perl --version

      # We use this instead of an env configuration so that we can expand
      # variables into the values of the new variables.
      - name: "Set environmental variables"
        run: |
          echo "PG_BSD_INDENT_DIR=$HOME/pg_bsd_indent" >> $GITHUB_ENV
          echo "PG_BUILD_DIR=$HOME/build" >> $GITHUB_ENV
          echo "PG_DATA_DIR=$HOME/data" >> $GITHUB_ENV
          echo "PG_LOG_FILE=$HOME/postgres.log" >> $GITHUB_ENV

      - name: "Cache Chocolately on Windows"
        if: matrix.os == 'windows-latest'
        uses: actions/cache@v2
        with:
          path: C:\Users\runneradmin\AppData\Local\Temp\chocolatey
          key: ${{ runner.os }}-chocolatey-${{ matrix.os }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-chocolatey-${{ matrix.os }}-
            ${{ runner.os }}-chocolatey-

      - name: "Install Bison with Chocolatey on Windows"
        if: matrix.os == 'windows-latest'
        run: |
          choco install --no-progress winflexbison3

      - name: "./configure"
        # run: ./configure --host $CONFIGURE_HOST --prefix $PG_BUILD_DIR
        run: ./configure --prefix $PG_BUILD_DIR
        env:
          BISON: ${{ matrix.BISON }}
          CC: ${{ matrix.CC }}
          CFLAGS: ${{ matrix.CFLAGS }}
          # CONFIGURE_HOST: ${{ matrix.CONFIGURE_HOST }}

      - name: "make"
        run: make -j$PG_BUILD_PARALLELISM -s
        env:
          CFLAGS: ${{ matrix.CFLAGS }}

      - name: "make install"
        run: make -j$PG_BUILD_PARALLELISM -s install

      - name: "Initialize data directory"
        run: $PG_BUILD_DIR/bin/initdb -D $PG_DATA_DIR

      - name: "Start Postgres"
        run: $PG_BUILD_DIR/bin/postgres -D $PG_DATA_DIR -p $PGPORT >$PG_LOG_FILE 2>&1 &

      - name: "Wait for Postgres"

        # We should probably get fancier here and try a psql every second for N
        # times so that we're not using as blunt of a tool as a sleep X.
        run: sleep 5

      - name: "Run tests (make installcheck-parallel)"
        run:  make installcheck-parallel

  pgindent:
    runs-on: ubuntu-latest
    timeout-minutes: 10

    env:
      CC: clang
      CFLAGS: "-fuse-ld=gold"

    steps:
      - uses: actions/checkout@v2
        with:
          repository: postgres/postgres

      # We use this instead of an env configuration so that we can expand
      # variables into the values of the new variables.
      - name: "Set environmental variables"
        run: |
          echo "PG_BSD_INDENT_DIR=$HOME/pg_bsd_indent" >> $GITHUB_ENV
          echo "PG_BUILD_DIR=$HOME/build" >> $GITHUB_ENV

      - name: "./configure"
        run: ./configure --prefix $PG_BUILD_DIR

      - name: "make"
        run: make -j$PG_BUILD_PARALLELISM -s

      - name: "make install"
        run: make -j$PG_BUILD_PARALLELISM -s install

      - name: "Fetch pg_bsd_indent"
        run: git clone https://git.postgresql.org/git/pg_bsd_indent.git $PG_BSD_INDENT_DIR/

      - name: "Build pg_bsd_indent"
        run: |
          cd $PG_BSD_INDENT_DIR/
          make PG_CONFIG=$PG_BUILD_DIR/bin/pg_config

      - name: "Get latest typedefs from build farm"
        run: curl -o src/tools/pgindent/typedefs.list https://buildfarm.postgresql.org/cgi-bin/typedefs.pl

      - name: "pgindent"
        run: PGINDENT=$PG_BSD_INDENT_DIR/pg_bsd_indent src/tools/pgindent/pgindent
